// Generated by gencpp from file vision_rs/Vision.msg
// DO NOT EDIT!


#ifndef VISION_RS_MESSAGE_VISION_H
#define VISION_RS_MESSAGE_VISION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision_rs
{
template <class ContainerAllocator>
struct Vision_
{
  typedef Vision_<ContainerAllocator> Type;

  Vision_()
    : bool_detection(0)
    , bool_depth(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , height(0.0)
    , width(0.0)
    , angle(0.0)  {
    }
  Vision_(const ContainerAllocator& _alloc)
    : bool_detection(0)
    , bool_depth(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , height(0.0)
    , width(0.0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _bool_detection_type;
  _bool_detection_type bool_detection;

   typedef uint32_t _bool_depth_type;
  _bool_depth_type bool_depth;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _height_type;
  _height_type height;

   typedef float _width_type;
  _width_type width;

   typedef float _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::vision_rs::Vision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_rs::Vision_<ContainerAllocator> const> ConstPtr;

}; // struct Vision_

typedef ::vision_rs::Vision_<std::allocator<void> > Vision;

typedef boost::shared_ptr< ::vision_rs::Vision > VisionPtr;
typedef boost::shared_ptr< ::vision_rs::Vision const> VisionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_rs::Vision_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_rs::Vision_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_rs::Vision_<ContainerAllocator1> & lhs, const ::vision_rs::Vision_<ContainerAllocator2> & rhs)
{
  return lhs.bool_detection == rhs.bool_detection &&
    lhs.bool_depth == rhs.bool_depth &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.height == rhs.height &&
    lhs.width == rhs.width &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_rs::Vision_<ContainerAllocator1> & lhs, const ::vision_rs::Vision_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_rs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision_rs::Vision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_rs::Vision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_rs::Vision_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_rs::Vision_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_rs::Vision_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_rs::Vision_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_rs::Vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3530597fb0acf79ac5d9f35a155d9e4a";
  }

  static const char* value(const ::vision_rs::Vision_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3530597fb0acf79aULL;
  static const uint64_t static_value2 = 0xc5d9f35a155d9e4aULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_rs::Vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_rs/Vision";
  }

  static const char* value(const ::vision_rs::Vision_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_rs::Vision_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 bool_detection\n"
"uint32 bool_depth\n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"float32 height\n"
"float32 width\n"
"\n"
"float32 angle\n"
;
  }

  static const char* value(const ::vision_rs::Vision_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_rs::Vision_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bool_detection);
      stream.next(m.bool_depth);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vision_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_rs::Vision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_rs::Vision_<ContainerAllocator>& v)
  {
    s << indent << "bool_detection: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.bool_detection);
    s << indent << "bool_depth: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.bool_depth);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_RS_MESSAGE_VISION_H
